// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: product.proto

package product

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Products service

func NewProductsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Products service

type ProductsService interface {
	GetProductList(ctx context.Context, in *ProductListRequest, opts ...client.CallOption) (*ProductListResponse, error)
	ProductAdd(ctx context.Context, in *ProductAddRequest, opts ...client.CallOption) (*ProductAddResponse, error)
	ProductDelete(ctx context.Context, in *ProductDeleteRequest, opts ...client.CallOption) (*ProductAddResponse, error)
	GetProductInfo(ctx context.Context, in *ProductDeleteRequest, opts ...client.CallOption) (*ProductInfoResponse, error)
	ProductUpdate(ctx context.Context, in *ProductUpdateRequest, opts ...client.CallOption) (*ProductAddResponse, error)
}

type productsService struct {
	c    client.Client
	name string
}

func NewProductsService(name string, c client.Client) ProductsService {
	return &productsService{
		c:    c,
		name: name,
	}
}

func (c *productsService) GetProductList(ctx context.Context, in *ProductListRequest, opts ...client.CallOption) (*ProductListResponse, error) {
	req := c.c.NewRequest(c.name, "Products.GetProductList", in)
	out := new(ProductListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) ProductAdd(ctx context.Context, in *ProductAddRequest, opts ...client.CallOption) (*ProductAddResponse, error) {
	req := c.c.NewRequest(c.name, "Products.ProductAdd", in)
	out := new(ProductAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) ProductDelete(ctx context.Context, in *ProductDeleteRequest, opts ...client.CallOption) (*ProductAddResponse, error) {
	req := c.c.NewRequest(c.name, "Products.ProductDelete", in)
	out := new(ProductAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) GetProductInfo(ctx context.Context, in *ProductDeleteRequest, opts ...client.CallOption) (*ProductInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Products.GetProductInfo", in)
	out := new(ProductInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsService) ProductUpdate(ctx context.Context, in *ProductUpdateRequest, opts ...client.CallOption) (*ProductAddResponse, error) {
	req := c.c.NewRequest(c.name, "Products.ProductUpdate", in)
	out := new(ProductAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Products service

type ProductsHandler interface {
	GetProductList(context.Context, *ProductListRequest, *ProductListResponse) error
	ProductAdd(context.Context, *ProductAddRequest, *ProductAddResponse) error
	ProductDelete(context.Context, *ProductDeleteRequest, *ProductAddResponse) error
	GetProductInfo(context.Context, *ProductDeleteRequest, *ProductInfoResponse) error
	ProductUpdate(context.Context, *ProductUpdateRequest, *ProductAddResponse) error
}

func RegisterProductsHandler(s server.Server, hdlr ProductsHandler, opts ...server.HandlerOption) error {
	type products interface {
		GetProductList(ctx context.Context, in *ProductListRequest, out *ProductListResponse) error
		ProductAdd(ctx context.Context, in *ProductAddRequest, out *ProductAddResponse) error
		ProductDelete(ctx context.Context, in *ProductDeleteRequest, out *ProductAddResponse) error
		GetProductInfo(ctx context.Context, in *ProductDeleteRequest, out *ProductInfoResponse) error
		ProductUpdate(ctx context.Context, in *ProductUpdateRequest, out *ProductAddResponse) error
	}
	type Products struct {
		products
	}
	h := &productsHandler{hdlr}
	return s.Handle(s.NewHandler(&Products{h}, opts...))
}

type productsHandler struct {
	ProductsHandler
}

func (h *productsHandler) GetProductList(ctx context.Context, in *ProductListRequest, out *ProductListResponse) error {
	return h.ProductsHandler.GetProductList(ctx, in, out)
}

func (h *productsHandler) ProductAdd(ctx context.Context, in *ProductAddRequest, out *ProductAddResponse) error {
	return h.ProductsHandler.ProductAdd(ctx, in, out)
}

func (h *productsHandler) ProductDelete(ctx context.Context, in *ProductDeleteRequest, out *ProductAddResponse) error {
	return h.ProductsHandler.ProductDelete(ctx, in, out)
}

func (h *productsHandler) GetProductInfo(ctx context.Context, in *ProductDeleteRequest, out *ProductInfoResponse) error {
	return h.ProductsHandler.GetProductInfo(ctx, in, out)
}

func (h *productsHandler) ProductUpdate(ctx context.Context, in *ProductUpdateRequest, out *ProductAddResponse) error {
	return h.ProductsHandler.ProductUpdate(ctx, in, out)
}
