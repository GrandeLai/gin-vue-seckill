// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: seckill.proto

package seckill

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Seckills service

func NewSeckillsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Seckills service

type SeckillsService interface {
	GetSeckillList(ctx context.Context, in *SeckillListRequest, opts ...client.CallOption) (*SeckillListResponse, error)
	GetProducts(ctx context.Context, in *ProductRequest, opts ...client.CallOption) (*ProductResponse, error)
	SeckillDelete(ctx context.Context, in *SeckillDeleteRequest, opts ...client.CallOption) (*SeckillDeleteResponse, error)
	SecKillAdd(ctx context.Context, in *SeckillDetail, opts ...client.CallOption) (*SeckillDeleteResponse, error)
	SecKillToEdit(ctx context.Context, in *SeckillDeleteRequest, opts ...client.CallOption) (*SecKillToEditResponse, error)
	SecKillDoEdit(ctx context.Context, in *SeckillDetail, opts ...client.CallOption) (*SeckillDeleteResponse, error)
	FrontSecKillList(ctx context.Context, in *SeckillListRequest, opts ...client.CallOption) (*SeckillListResponse, error)
	FrontSecKillDetail(ctx context.Context, in *SeckillDeleteRequest, opts ...client.CallOption) (*FrontSecKillDetailResponse, error)
}

type seckillsService struct {
	c    client.Client
	name string
}

func NewSeckillsService(name string, c client.Client) SeckillsService {
	return &seckillsService{
		c:    c,
		name: name,
	}
}

func (c *seckillsService) GetSeckillList(ctx context.Context, in *SeckillListRequest, opts ...client.CallOption) (*SeckillListResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.GetSeckillList", in)
	out := new(SeckillListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) GetProducts(ctx context.Context, in *ProductRequest, opts ...client.CallOption) (*ProductResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.GetProducts", in)
	out := new(ProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) SeckillDelete(ctx context.Context, in *SeckillDeleteRequest, opts ...client.CallOption) (*SeckillDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SeckillDelete", in)
	out := new(SeckillDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) SecKillAdd(ctx context.Context, in *SeckillDetail, opts ...client.CallOption) (*SeckillDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SecKillAdd", in)
	out := new(SeckillDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) SecKillToEdit(ctx context.Context, in *SeckillDeleteRequest, opts ...client.CallOption) (*SecKillToEditResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SecKillToEdit", in)
	out := new(SecKillToEditResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) SecKillDoEdit(ctx context.Context, in *SeckillDetail, opts ...client.CallOption) (*SeckillDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.SecKillDoEdit", in)
	out := new(SeckillDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) FrontSecKillList(ctx context.Context, in *SeckillListRequest, opts ...client.CallOption) (*SeckillListResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.FrontSecKillList", in)
	out := new(SeckillListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seckillsService) FrontSecKillDetail(ctx context.Context, in *SeckillDeleteRequest, opts ...client.CallOption) (*FrontSecKillDetailResponse, error) {
	req := c.c.NewRequest(c.name, "Seckills.FrontSecKillDetail", in)
	out := new(FrontSecKillDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Seckills service

type SeckillsHandler interface {
	GetSeckillList(context.Context, *SeckillListRequest, *SeckillListResponse) error
	GetProducts(context.Context, *ProductRequest, *ProductResponse) error
	SeckillDelete(context.Context, *SeckillDeleteRequest, *SeckillDeleteResponse) error
	SecKillAdd(context.Context, *SeckillDetail, *SeckillDeleteResponse) error
	SecKillToEdit(context.Context, *SeckillDeleteRequest, *SecKillToEditResponse) error
	SecKillDoEdit(context.Context, *SeckillDetail, *SeckillDeleteResponse) error
	FrontSecKillList(context.Context, *SeckillListRequest, *SeckillListResponse) error
	FrontSecKillDetail(context.Context, *SeckillDeleteRequest, *FrontSecKillDetailResponse) error
}

func RegisterSeckillsHandler(s server.Server, hdlr SeckillsHandler, opts ...server.HandlerOption) error {
	type seckills interface {
		GetSeckillList(ctx context.Context, in *SeckillListRequest, out *SeckillListResponse) error
		GetProducts(ctx context.Context, in *ProductRequest, out *ProductResponse) error
		SeckillDelete(ctx context.Context, in *SeckillDeleteRequest, out *SeckillDeleteResponse) error
		SecKillAdd(ctx context.Context, in *SeckillDetail, out *SeckillDeleteResponse) error
		SecKillToEdit(ctx context.Context, in *SeckillDeleteRequest, out *SecKillToEditResponse) error
		SecKillDoEdit(ctx context.Context, in *SeckillDetail, out *SeckillDeleteResponse) error
		FrontSecKillList(ctx context.Context, in *SeckillListRequest, out *SeckillListResponse) error
		FrontSecKillDetail(ctx context.Context, in *SeckillDeleteRequest, out *FrontSecKillDetailResponse) error
	}
	type Seckills struct {
		seckills
	}
	h := &seckillsHandler{hdlr}
	return s.Handle(s.NewHandler(&Seckills{h}, opts...))
}

type seckillsHandler struct {
	SeckillsHandler
}

func (h *seckillsHandler) GetSeckillList(ctx context.Context, in *SeckillListRequest, out *SeckillListResponse) error {
	return h.SeckillsHandler.GetSeckillList(ctx, in, out)
}

func (h *seckillsHandler) GetProducts(ctx context.Context, in *ProductRequest, out *ProductResponse) error {
	return h.SeckillsHandler.GetProducts(ctx, in, out)
}

func (h *seckillsHandler) SeckillDelete(ctx context.Context, in *SeckillDeleteRequest, out *SeckillDeleteResponse) error {
	return h.SeckillsHandler.SeckillDelete(ctx, in, out)
}

func (h *seckillsHandler) SecKillAdd(ctx context.Context, in *SeckillDetail, out *SeckillDeleteResponse) error {
	return h.SeckillsHandler.SecKillAdd(ctx, in, out)
}

func (h *seckillsHandler) SecKillToEdit(ctx context.Context, in *SeckillDeleteRequest, out *SecKillToEditResponse) error {
	return h.SeckillsHandler.SecKillToEdit(ctx, in, out)
}

func (h *seckillsHandler) SecKillDoEdit(ctx context.Context, in *SeckillDetail, out *SeckillDeleteResponse) error {
	return h.SeckillsHandler.SecKillDoEdit(ctx, in, out)
}

func (h *seckillsHandler) FrontSecKillList(ctx context.Context, in *SeckillListRequest, out *SeckillListResponse) error {
	return h.SeckillsHandler.FrontSecKillList(ctx, in, out)
}

func (h *seckillsHandler) FrontSecKillDetail(ctx context.Context, in *SeckillDeleteRequest, out *FrontSecKillDetailResponse) error {
	return h.SeckillsHandler.FrontSecKillDetail(ctx, in, out)
}
