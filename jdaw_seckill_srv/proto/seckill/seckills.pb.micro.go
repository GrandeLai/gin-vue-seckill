// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: seckills.proto

package seckill

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SecKill service

func NewSecKillEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SecKill service

type SecKillService interface {
	FrontSecKill(ctx context.Context, in *SecKillRequest, opts ...client.CallOption) (*SecKillResponse, error)
}

type secKillService struct {
	c    client.Client
	name string
}

func NewSecKillService(name string, c client.Client) SecKillService {
	return &secKillService{
		c:    c,
		name: name,
	}
}

func (c *secKillService) FrontSecKill(ctx context.Context, in *SecKillRequest, opts ...client.CallOption) (*SecKillResponse, error) {
	req := c.c.NewRequest(c.name, "SecKill.FrontSecKill", in)
	out := new(SecKillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecKill service

type SecKillHandler interface {
	FrontSecKill(context.Context, *SecKillRequest, *SecKillResponse) error
}

func RegisterSecKillHandler(s server.Server, hdlr SecKillHandler, opts ...server.HandlerOption) error {
	type secKill interface {
		FrontSecKill(ctx context.Context, in *SecKillRequest, out *SecKillResponse) error
	}
	type SecKill struct {
		secKill
	}
	h := &secKillHandler{hdlr}
	return s.Handle(s.NewHandler(&SecKill{h}, opts...))
}

type secKillHandler struct {
	SecKillHandler
}

func (h *secKillHandler) FrontSecKill(ctx context.Context, in *SecKillRequest, out *SecKillResponse) error {
	return h.SecKillHandler.FrontSecKill(ctx, in, out)
}
